// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}

model User {
  id                           String    @id @default(uuid())
  name                         String
  email                        String    @unique
  password                     String
  role                         UserRole  @default(USER)
  isEmailVerified              Boolean   @default(false)
  emailVerificationToken       String?
  emailVerificationTokenExpiry DateTime?
  forgotPasswordToken          String?
  forgotPasswordTokenExpiry    DateTime?
  refreshToken                 String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review Review[]
  order  Order[]
}

model Book {
  id          String    @id @default(uuid())
  title       String
  author      String
  description String?
  price       Decimal
  stock       Int
  publishedAt DateTime?
  category  Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review    Review[]
  orderItem OrderItem[]
}

model Category{
  id String @id @default(uuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  books Book[]
}

model Review {
  id      String  @id @default(uuid())
  userId  String
  bookId  String
  rating  String
  comment String?

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  totalAmount Decimal
  status      OrderStatus @default(PENDING)

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  payment   Payment[]
  orderItem OrderItem[]
}

model OrderItem {
  id         String  @id @default(uuid())
  orderId    String
  bookId     String
  quantity   Int
  unit_price Decimal

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  book  Book  @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String        @id @default(uuid())
  orderId       String
  paymentStatus PaymentStatus
  transactionId String?       @unique

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
